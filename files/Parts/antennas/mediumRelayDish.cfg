// Adds an indicator to the medium relay dish.

@PART[RelayAntenna50]:FOR[IndicatorLights] {

	//-------------------------------------------------------------------------
	// INDICATOR MESHES
	//-------------------------------------------------------------------------

	MODEL
	{
		model = IndicatorLights/Meshes/nubbinLamp
		position = 0, 1.079, 0
		scale = 5, 5, 1.5
		rotation = -90, 0, 0
	}


	//-------------------------------------------------------------------------
	// CONTROLLABLE EMISSIVES
	//-------------------------------------------------------------------------

	MODULE {
		name = ModuleControllableEmissive
		target = IndicatorLights/Meshes/nubbinLamp
		emissiveName = indicator
	}


	//-------------------------------------------------------------------------
	// CONTROLLERS
	//-------------------------------------------------------------------------

	MODULE {
		name = ModuleDataTransmitterIndicator
		emissiveName = indicator
		// Get really fancy with busy color. This module type exposes one static
		// field, dataRate. We'll use a random flicker for the animation (like
		// an old-time modem), and we'll plug the data rate both into the flicker
		// period (so higher-speed antennas flicker faster), and into the bias
		// (so higher-speed antennas spend a greater percentage of their time
		// in the "on" state rather than "off").
		//
		// We don't actually have to use the static syntax here (we could just
		// take the data rate for this antenna, do the math, and plug in the
		// literal numbers here). However, using the actual static expression
		// comes with a few benefits. First, it's more maintainable: we
		// can just use the same static expression for all the antennas, rather
		// than having to come up with a different expression with different math
		// for each one. Second, it's more explicit to anyone reading this just
		// *why* the number is what it is. Third, it's more robust: if Squad ever
		// tinkers with the data rates, or someone uses ModuleManager to tweak
		// them, this will automatically follow suit. Fourth, it's friendlier
		// to modders: if you have your own antenna and you want to set it up
		// for IndicatorLights compatibility, you can just copy the following
		// line verbatim and you'll get behavior that's consistent with what
		// IndicatorLights does with the stock antennas.
		busyColor = random($ToggleLED, $Off, divide(400, static(dataRate)), between(subtract(multiply(sqrt(static(dataRate)), 1.1), 2.3), -0.4, 0.5))
	}
}