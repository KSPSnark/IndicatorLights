// Demonstrate the use of ModuleEmissiveArrayController to control arrays
// of lights.
//
// This example adds lights to the HECS2 probe core. It adds two arrays
// of lights:  a 4x3 rectangular grid, and a row of five round lights.
//
// The grid lights have a random blinking pattern (mostly green, sometimes
// red). When the probe core contains no electricity, this grid switches
// to be mostly off, with occasional random red blinks.  We achieve this
// effect by using the random() color source syntax, and use the index for
// the seed parameter, so that all the random lights are independent of
// each other.
//
// The row of five lights has a "traveling" animated pattern. We achieve this
// by using the blink() color source syntax, and use the index to control
// the phase of the blink. If you disable the probe core's reaction wheel,
// then the animation changes color and direction.

@PART[HECS2_ProbeCore] {

	//-------------------------------------------------------------------------
	// INDICATOR MESHES
	//-------------------------------------------------------------------------

	// Blinkenlights, row 1

	MODEL
	{
		model = IndicatorLights/Meshes/squareLamp
		scale = 1, 0.75, 0.6
		position = -0.25, 0.27, -0.73
		rotation = 0, 180, 0
	}

	MODEL
	{
		model = IndicatorLights/Meshes/squareLamp
		scale = 1, 0.75, 0.6
		position = -0.16, 0.27, -0.73
		rotation = 0, 180, 0
	}

	MODEL
	{
		model = IndicatorLights/Meshes/squareLamp
		scale = 1, 0.75, 0.6
		position = -0.07, 0.27, -0.73
		rotation = 0, 180, 0
	}

	MODEL
	{
		model = IndicatorLights/Meshes/squareLamp
		scale = 1, 0.75, 0.6
		position = 0.02, 0.27, -0.73
		rotation = 0, 180, 0
	}

	// Blinkenlights, row 2

	MODEL
	{
		model = IndicatorLights/Meshes/squareLamp
		scale = 1, 0.75, 0.6
		position = -0.25, 0.20, -0.73
		rotation = 0, 180, 0
	}

	MODEL
	{
		model = IndicatorLights/Meshes/squareLamp
		scale = 1, 0.75, 0.6
		position = -0.16, 0.20, -0.73
		rotation = 0, 180, 0
	}

	MODEL
	{
		model = IndicatorLights/Meshes/squareLamp
		scale = 1, 0.75, 0.6
		position = -0.07, 0.20, -0.73
		rotation = 0, 180, 0
	}

	MODEL
	{
		model = IndicatorLights/Meshes/squareLamp
		scale = 1, 0.75, 0.6
		position = 0.02, 0.20, -0.73
		rotation = 0, 180, 0
	}

	// Blinkenlights, row 3

	MODEL
	{
		model = IndicatorLights/Meshes/squareLamp
		scale = 1, 0.75, 0.6
		position = -0.25, 0.13, -0.73
		rotation = 0, 180, 0
	}

	MODEL
	{
		model = IndicatorLights/Meshes/squareLamp
		scale = 1, 0.75, 0.6
		position = -0.16, 0.13, -0.73
		rotation = 0, 180, 0
	}

	MODEL
	{
		model = IndicatorLights/Meshes/squareLamp
		scale = 1, 0.75, 0.6
		position = -0.07, 0.13, -0.73
		rotation = 0, 180, 0
	}

	MODEL
	{
		model = IndicatorLights/Meshes/squareLamp
		scale = 1, 0.75, 0.6
		position = 0.02, 0.13, -0.73
		rotation = 0, 180, 0
	}

	// Sequence lights

	MODEL
	{
		model = IndicatorLights/Meshes/nubbinLamp
		scale = 1, 1, 0.5
		position = 0.3, 0.27, -0.73
		rotation = 0, 180, 0
	}

	MODEL
	{
		model = IndicatorLights/Meshes/nubbinLamp
		scale = 1, 1, 0.5
		position = 0.3, 0.20, -0.73
		rotation = 0, 180, 0
	}

	MODEL
	{
		model = IndicatorLights/Meshes/nubbinLamp
		scale = 1, 1, 0.5
		position = 0.3, 0.13, -0.73
		rotation = 0, 180, 0
	}

	MODEL
	{
		model = IndicatorLights/Meshes/nubbinLamp
		scale = 1, 1, 0.5
		position = 0.3, 0.06, -0.73
		rotation = 0, 180, 0
	}

	MODEL
	{
		model = IndicatorLights/Meshes/nubbinLamp
		scale = 1, 1, 0.5
		position = 0.3, -0.01, -0.73
		rotation = 0, 180, 0
	}


	//-------------------------------------------------------------------------
	// CONTROLLABLE EMISSIVES
	//-------------------------------------------------------------------------

	// This emissive controls the grid of square lamps.
	MODULE {
		name = ModuleControllableEmissive
		target = IndicatorLights/Meshes/squareLamp
		emissiveName = randomBlinken
	}

	// This emissive controls the row of round lamps.
	MODULE {
		name = ModuleControllableEmissive
		// Note that we can simply specify the nubbin lamp here, and thereby
		// this emissive will control all the meshes with that name. Suppose
		// we wanted to use squareLamp instead of nubbinLamp here. In that
		// case, the randomBlinken emissive and the sequenceLights emissive
		// would be using the same-named meshes, so in that case we would need
		// to add index qualifiers to the target, using the colon + indices
		// syntax, so that they can tell whose is whose.
		target = IndicatorLights/Meshes/nubbinLamp
		emissiveName = sequenceLights
	}


	//-------------------------------------------------------------------------
	// CONTROLLERS
	//-------------------------------------------------------------------------

	// We'll use this as a toggle controller for the random blinkenlights.
	MODULE {
		name = ModuleResourceLevelIndicator
		resourceName = ElectricCharge
	}

	// We'll use this as a toggle controller for the row of round lights.
	MODULE {
		name = ModuleReactionWheelIndicator
	}

	// This controls the array of random blinkenlights.
	MODULE {
		name = ModuleEmissiveArrayController
		emissiveName = randomBlinken
		toggleID = ModuleResourceLevelIndicator
		// We use "index" as the seed parameter for the random color source, so
		// that every light in the array will have an independent random pattern
		// (instead of all of them blinking in unison).
		activeColor = random(random($ToggleLED, $LowResource, 2000, 0.7, index), $Off, 1500, 0, index)
		inactiveColor = random($LowResource, $Off, 4000, -0.7, index)
	}

	// This controls the row of round lights.
	MODULE {
		name = ModuleEmissiveArrayController
		emissiveName = sequenceLights
		toggleID = ModuleReactionWheelIndicator

		// We want the row of lights to have a "traveling" effect, where
		// each light illuminates in sequence. So we'll use a blink pattern,
		// and we'll tie the phase to the index. Phase is in the range 0 to 1,
		// so we just divide the index by the number of lights in the row.
		activeColor = blink($ToggleLED, 180, $Off, 600, divide(index, 5))

		// When the reaction wheel is disabled, change the color, and also
		// animate it so that the traveling light goes down instead of up.
		// We accomplish the direction change by replacing phase with 1-phase.
		inactiveColor = blink($Warning, 150, $Off, 1500, subtract(1, divide(index, 5)))
	}
}
