// This shows an example of how to make an indicator that displays multiple
// resources simultaneously.
//
// In this example, we tinker with the 2-ton LFO tank. This tank contains
// two resources (LiquidFuel and Oxidizer).  We'll add three indicators to
// the tank.  One indicator shows the LiquidFuel level.  Another shows the
// Oxidizer level.  A third, "composite" indicator shows the level of *both*
// of the two resources, based on the minimum (i.e. whichever of those two
// resources has the lowest percentage full, that's what determines what
// the indicator displays).
//
// To test this out, copy this .cfg file into the IndicatorLights folder,
// then try adding the tank to a ship and see what happens to the indicators
// when you play around with the LiquidFuel and Oxidizer content.

@PART[fuelTank] {
	@description ^= :(.)$:$0 Example tank has three indicators. Top one shows LiquidFuel, bottom one shows Oxidizer, middle one shows the minimum of the two.:

	// We have to re-specify the model for the stock part, because this is
	// an older part that uses the "mesh =" syntax in its .cfg file instead
	// of the newer "MODEL" syntax. The "mesh =" syntax doesn't allow having
	// multiple models as part of the same part, which would prevent this mod
	// from adding meshes for the indicator lights.
	MODEL
	{
		model = Squad/Parts/FuelTank/fuelTankT400/model
	}


	//-------------------------------------------------------------------------
	// INDICATOR MESHES
	//-------------------------------------------------------------------------

	MODEL
	{
		model = IndicatorLights/Meshes/squareLamp
		scale = 1, 0.5, 1
		position = 0, 0.3, -0.475
		rotation = 0, 180, 0
	}

	MODEL
	{
		model = IndicatorLights/Meshes/squareLamp
		scale = 1, 0.5, 1
		position = 0, 0, -0.475
		rotation = 0, 180, 0
	}

	MODEL
	{
		model = IndicatorLights/Meshes/squareLamp
		scale = 1, 0.5, 1
		position = 0, -0.3, -0.475
		rotation = 0, 180, 0
	}


	//-------------------------------------------------------------------------
	// CONTROLLABLE EMISSIVES
	//-------------------------------------------------------------------------

	MODULE {
		name = ModuleControllableEmissive
		target = IndicatorLights/Meshes/squareLamp:0
		emissiveName = liquidFuelIndicator
	}

	MODULE {
		name = ModuleControllableEmissive
		target = IndicatorLights/Meshes/squareLamp:1
		emissiveName = dualIndicator
	}

	MODULE {
		name = ModuleControllableEmissive
		target = IndicatorLights/Meshes/squareLamp:2
		emissiveName = oxidizerIndicator
	}


	//-------------------------------------------------------------------------
	// CONTROLLERS
	//-------------------------------------------------------------------------

	// First, the indicator for liquid-fuel-only. It's color-coded based on the
	// amount of liquid fuel we have. If liquid fuel is disabled, it flashes.
	MODULE {
		name = ModuleResourceLevelIndicator
		controllerName = liquidFuelLevel
		resourceName = LiquidFuel
	}
	MODULE {
		name = ModuleResourceEnabledIndicator
		controllerName = liquidFuelEnabled
		resourceName = LiquidFuel
		enabledColor = liquidFuelLevel
		disabledColor = blink(liquidFuelLevel, 900, $Off, 300)
		emissiveName = liquidFuelIndicator
	}

	// Next, the indicator for oxidizer-only. It's color-coded based on the
	// amount of oxidizer we have. If oxidizer is disabled, it flashes.
	MODULE {
		name = ModuleResourceLevelIndicator
		controllerName = oxidizerLevel
		resourceName = Oxidizer
	}
	MODULE {
		name = ModuleResourceEnabledIndicator
		controllerName = oxidizerEnabled
		resourceName = Oxidizer
		enabledColor = oxidizerLevel
		disabledColor = blink(oxidizerLevel, 900, $Off, 300)
		emissiveName = oxidizerIndicator
	}

	// Okay, now the fun part: a "composite" indicator for both resources.

	// First, we need a scalar indicator for the resource amount. We want
	// this to be a composite of the amounts of liquid fuel and oxidizer,
	// picking whichever one is lowest.
	MODULE {
		name = ModuleScalarIndicator
		controllerName = dualLevel
		// Use minimum input value. Also supports "maximum" and "average"
		input = minimum(liquidFuelLevel, oxidizerLevel)
		highColor = $HighResource
		mediumColor = $MediumResource
		lowColor = $LowResource
		criticalColor = pulsate($LowResource, 1200, 1, 0.6)
	}

	// We feed that into a composite boolean indicator that tracks whether
	// all the resources are enabled or not. We want it to flash if *any*
	// of the resources are disabled.
	MODULE {
		name = ModuleBooleanIndicator
		// Note that you can put a "!" in front of a boolean input to invert it
		input = and(liquidFuelEnabled, oxidizerEnabled)
		activeColor = dualLevel
		inactiveColor = blink(dualLevel, 900, $Off, 300)
		emissiveName = dualIndicator
	}
}