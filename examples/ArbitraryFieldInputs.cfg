// Demonstrate the use of field@module syntax.
//
// This example adds a light to the TR-2L Ruggedized Vehicular Wheel to show
// its motor status. To do this, it works with three fields from ModuleWheelMotor:
//
// - motorEnabled   ("is the motor turned on")
// - motorInverted  ("is the motor set up in reverse mode")
// - driveOutput    ("how much power is the motor currently putting out")
//
// The wheel is handy for demonstrating the usefulness of this syntax because
// there aren't any IndicatorLights controllers that are specifically designed
// to work with wheels.  Therefore, to work with fields such as the above requires
// the ability to target arbitrary fields, which is what the field@module syntax
// is all about. Search this file for the "@" character to see how it's used.


@PART[wheelMed] {
	@description ^= :(.)$:$0 Example wheel has indicator light showing motor status.:

	// We have to re-specify the model for the stock part, because this is
	// an older part that uses the "mesh =" syntax in its .cfg file instead
	// of the newer "MODEL" syntax. The "mesh =" syntax doesn't allow having
	// multiple models as part of the same part, which would prevent this mod
	// from adding meshes for the indicator lights.
	MODEL
	{
		model = Squad/Parts/Wheel/roverWheelTR-2L/model
	}


	//-------------------------------------------------------------------------
	// INDICATOR MESHES
	//-------------------------------------------------------------------------

	MODEL
	{
		model = IndicatorLights/Meshes/squareLamp2
		position = -0.194, 0.16, 0
	}


	//-------------------------------------------------------------------------
	// CONTROLLABLE EMISSIVES
	//-------------------------------------------------------------------------

	MODULE {
		name = ModuleControllableEmissive
		target = IndicatorLights/Meshes/squareLamp2
		emissiveName = indicator
	}


	//-------------------------------------------------------------------------
	// CONTROLLERS
	//-------------------------------------------------------------------------

	// A toggle that's on when the motor's active, off when it's not. When it's
	// on, emit green if it's in "normal" mode, red if the motor is inverted.
	// If motor output is under 60%, it's displayed dim.
	MODULE {
		name = ModuleBooleanIndicator
		controllerName = motorStatus
		// The input (i.e. deciding on versus off) is based on whether the
		// motor is enabled.
		input = motorEnabled@ModuleWheelMotor
		// When it's enabled, the color will be green or red depending on whether
		// it's in "forward" or "reverse" mode.
		activeColor = if(motorInverted@ModuleWheelMotor, #FF0000, #00FF00)
		// When the motor is not enabled, the light is simply off.
		inactiveColor = $Off
	}

	// Take the output of the toggles above, then adjust the brightness based
	// on the motor's drive output.
	MODULE {
		name = ModuleBooleanIndicator
		controllerName = motorPower
		input = motorStatus
		emissiveName = indicator
		// If the drive output of the motor is below 30%, display at half brightness.
		// Otherwise, display at full brightness.
		activeColor = if(lt(driveOutput@ModuleWheelMotor, 30), dim(motorStatus, 0.5), motorStatus)
	}
}
